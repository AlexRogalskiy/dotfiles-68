'use strict';

describe('WZ Angular Test Scaffold', function() {

  describe('ngFromHtml(html, vm)', function() {

    it('should return a spa for the html', function(){
      var html = '<div class="ng-scope"></div>';
      var ng   = ngFromHtml(html);
      expect(ng.prop('outerHTML')).toBe('<div class="ng-scope"></div>');
    });

    it('spa should compute an ng expression', function(){
      var html = '<div>{{1+1}}</div></div>';
      var ng   = ngFromHtml(html);
      expect(ng.text()).toBe('2');
    });

    it('spa should substitute a vm variable', function(){
      var html = '<div>{{vm.variable}}</div></div>';
      var ng   = ngFromHtml(html, {variable: 'value'});
      expect(ng.text()).toBe('value');
    });
  });

  describe('ngFrom(template, vm)', function() {

    it('should return a spa for the template', function(){
      var html = '<div class="ng-scope"></div>';
      inject(function($templateCache){
        $templateCache.put('foo.html', html);
      });
      var ng = ngFrom('foo.html');
      expect(ng.prop('outerHTML')).toBe(html);
    });

    it('spa should return a template', function(){
      var html = '<div class="ng-scope">123</div>';
      inject(function($templateCache){
        $templateCache.put('foo.html', html);
      });
      var ng = ngFrom('foo.html');
      expect(ng.prop('outerHTML')).toBe(html);
    });

    it('spa should compute an ng expression', function(){
      inject(function($templateCache){
        $templateCache.put('foo.html', '<div>{{1+1}}</div>');
      });
      expect(ngFrom('foo.html').text()).toBe('2');
    });

    it('should substitute a vm variable', function(){
      var vm   = {variable: 'value'};
      inject(function($templateCache){
        $templateCache.put('foo.html', '<div>{{vm.variable}}</div>');
      });
      expect(ngFrom('foo.html', vm).text()).toBe('value');
    });
  });
});
