'use strict';
describe("factory bowl", function() {
  var bowl;
  beforeEach(function(){
    module('app');
    inject(function(_bowl_){ bowl = _bowl_ })
  })

  describe("leastDisabledButton(leastDisabledButton, display)", function() {

    testDisabledButtons([10,10,10,10,10,10,10,10,10,10,10,10], 0, 'game over');
    testDisabledButtons([],  11, 'first roll of frame');
    testDisabledButtons([9],  2, 'second roll of frame');
    testDisabledButtons([5],  6, 'second roll of frame');
    testDisabledButtons([0], 11, 'second roll of frame');
    testDisabledButtons([10,10,10,10,10,10,10,10,10,10], 11, 'tenth after strike');
    testDisabledButtons([10,10,10,10,10,10,10,10,10,10, 0], 11, 'tenth after strike and miss');
    testDisabledButtons([10,10,10,10,10,10,10,10,10,10, 5],  6, 'tenth after strike and miss');

    function testDisabledButtons(rolls, result, text){
      function firstDisabledButton(){
        var disabledButtons = vm.find('.roll:disabled');
        if (disabledButtons.length===0) return 11;
        return parseInt(disabledButtons.eq(0).text());
      } 
      it('after ' + rolls + ' least disabled button should be ' + result, function(){
        expect(bowl(rolls).leastDisabledButton()).toEqual(100+result, text);
      });
    }
  });

  describe("score", function() {

    testScore([], [], 'empty frame');
    testScore([1], [], 'single roll frame');
    testScore([5,5], [], 'incomplete spare');
    testScore([10, 10], [], 'incomplete strike');

    testScore([0,0], [0], 'gutter frame');
    testScore([9,0], [9], 'open frame');
    testScore([0,9], [9], 'open frame');

    testScore([5,5,5], [15]);
    testScore([10, 10, 10], [30]);

    testScore([0,0,1,2], [0,3], 'two complete frames');
    testScore([0,1,2,3], [1,6], 'two complete frames with accumulating scores');
    testScore([5,5,5,5,5], [15, 30], 'two complete spares');
    testScore([10,10,10,10], [30,60], 'two complete strikes');

    testScore([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 10, 1, 2],
              [0,0,0,0,0,0,0,0,0,13], 'tenth strike and open frame');

    testScore([1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,10],
              [1,3,6,10,15,21,28,36,45,65], 'game');
    testScore([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
              [15,30,45,60,75,90,105,120,135,150]);
    testScore([10,10,10,10,10,10,10,10,10,10,10,10],
              [30,60,90,120,150,180,210,240,270,300]);
    

    function testScore(rolls, result, text){
      it('should score ['+rolls+'] as ['+result+']', function(){
        expect(bowl(rolls).score()).toEqual(result, text);
      });
    }
  });

  describe("display", function() {
    testDisplay([], '', 'empty frame');
    testDisplay([0], '-', 'single gutter roll');
    testDisplay([1], '1', 'single non-gutter roll');
    testDisplay([9], '9', 'single non-gutter roll');

    testDisplay([0,0], '--', 'single frame');
    testDisplay([5,4], '54', 'single frame');

    testDisplay([5,5], '5/', 'spare');
    testDisplay([10], ' X', 'strike');

    testDisplay([1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,10],
              '1-2-3-4-5-6-7-8-9-X-/', 'game');
    testDisplay([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
              '5/5/5/5/5/5/5/5/5/5/5', 'spare game');
    testDisplay([10,10,10,10,10,10,10,10,10,10,10,10],
              ' X X X X X X X X XXXX', 'perfect game');

    function testDisplay(rolls, result, text){
      it('should score ['+rolls+'] as ['+result+']', function(){
        expect(bowl(rolls).display()).toBe(result, text);
      });
    }

  });
});	
