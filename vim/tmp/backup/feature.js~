'use strict';
describe('Superheroic Bowling', function() {
  var page;

  beforeEach(function(){ page = buildPage(); });

  describe('Rolls', function() {
    it('should display no rolls initially', function(){
      expect(page.rolls).toBe('');
    });
    it('should display one gutter roll', function(){
      page.enter(0);
      expect(page.rolls).toBe('-');
    });
    it('should display one nine-pin roll', function(){
      page.enter(9);
      expect(page.rolls).toBe('9');
    });
    it('should display an open frame', function(){
      page.enter(3);
      page.enter(4);
      expect(page.rolls).toBe('34');
    });
    it('should display a full game', function(){
      for (var frame=1; frame<=10; frame++){
        page.enter(frame);
        page.enter(0);
      }
      page.enter(10);
      expect(page.rolls).toBe('1-2-3-4-5-6-7-8-9-X-/');
    });
  });

  describe('Unrolls', function() {
    it('should unroll a single roll', function(){
      page.enter(3);
      page.unroll();
      expect(usage.rolls).toBe('');
    });
  });

  describe('Scores', function() {
    it('should initially be empty', function(){
      expect(page.scores).toEqual([]);
    });
    it('should be empty after a single pin', function(){
      page.enter(3);
      expect(page.scores).toEqual([]);
    });
    it('should score an open frame', function(){
      page.enter(3);
      page.enter(4);
      expect(page.scores).toEqual([7]);
    });
    it('should score a gutter game', function(){
      for(var frame=1; frame<=10; frame++){
        page.enter(0);
        page.enter(0);
      }
      expect(page.scores).toEqual([0,0,0,0,0,0,0,0,0,0]);
    });
    it('should score a 150 game', function(){
      for(var frame=1; frame<=10; frame++){
        page.enter(5);
        page.enter(5);
      }
      page.enter(5);
      expect(page.scores).toEqual([15,30,45,60,75,90,105,120,135,150]);
    });
    it('should score a perfect game', function(){
      for(var frame=1; frame<=10; frame++){
        page.enter(10);
      }
      page.enter(10);
      page.enter(10);
      expect(page.scores).toEqual([30,60,90,120,150,180,210,240,270,300]);
    });
  });

  describe('Disables', function() {
    it('should not disable any buttons initially', function(){
      expect(page.maxEnabled).toBe(10);
    });
    it('should disable all buttons when game is complete', function(){
      for(var frame=1; frame<=10; frame++){
        page.enter(10);
      }
      page.enter(10);
      page.enter(10);
      expect(page.maxEnabled).toBe(-1);
    });
  });

  function buildPage(){
    module('app', 'index.html');
    var spa = ngFrom('index.html');
    function parseArr(str){
      return str
        .split(/[\][,]/)
        .map(function(x){return parseInt(x)})
        .filter(function(x){return !isNaN(x)})
    }

    function computeMaxEnabled(set){
      var $lastEnabled = spa.find('.enter:enabled:last');
      return parseInt($lastEnabled.text()) || -1;
    }

    return {
      enter: function(pins){ spa.find('.enter').eq(pins).click(); },
      unroll: function(){ spa.find('.unroll').click(); },
      get scores(){
        return spa.find('.scores').get()
          .map(function(each){
            return parseInt(each.textContent);
          })
          .filter(function(each){
            return !isNaN(each);
          });
      },
      get rolls(){ return spa.find('.rolls').text(); },
      get maxEnabled(){ return computeMaxEnabled(spa.find('.enter'));}
    };

  }
});
