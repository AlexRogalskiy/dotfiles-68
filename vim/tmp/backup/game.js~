'use strict';
describe('game service', function(){
  var game;
  beforeEach(function(){
    module('app');
    inject(function(_game_){ game = _game_; });
  });
  describe('game.roll(rolls, pins)', function(){
    function testRoll(rolls, pins, result, comment){
      comment = comment || ('for "'+rolls+'", '+pins);
      expect(game.roll(rolls, pins)).toBe(result, comment);
    }
    it('first roll', function(){
      testRoll('', 0, '-');
      testRoll('', 1, '1');
      testRoll('', 9, '9');
      testRoll('', 10, ' X');
    });
    it('two rolls', function(){
      testRoll('-', 0, '--');
      testRoll('-', 1, '-1');
      testRoll('1', 0, '1-');
      testRoll('-', 10, '-/');
      testRoll(' X', 10, ' X X');
    });
    it('four rolls', function(){
      testRoll('123', 4, '1234');
      testRoll('1/2', 8, '1/2/');
    });
    describe('tenth frame', function(){
      var prefix = '------------------';
      it('open frame', function(){
        testRoll(prefix,     1, prefix+'1');
        testRoll(prefix+'1', 2, prefix+'12');
      });
      it('leadoff spare', function(){
        testRoll(prefix+'-/', 0, prefix+'-/-');
        testRoll(prefix+'-/', 10, prefix+'-/X');
      });
      it('leadoff strike', function(){
        testRoll(prefix, 10, prefix+'X');
        testRoll(prefix+'X', 10, prefix+'XX');
        testRoll(prefix+'X-', 10, prefix+'X-/');
        testRoll(prefix+'XX', 10, prefix+'XXX');
      });
    });
  });

  describe('score(rolls)', function(){
    function testScore(rolls, result, comment){
      comment = comment || '; score(['+rolls+'])';
      expect(game.score(rolls)).toEqual(result, comment);
    }
    it('scores incomplete frames', function(){
      testScore('', []);
      testScore('-', []);
      testScore('1', []);
      testScore('-/', []);
      testScore('5/', []);
      testScore(' X', []);
      testScore(' X-', []);
      testScore(' X9', []);
    });
    it('scores an empty frame', function(){
      testScore('--', [0]);
      testScore('-1', [1]);
      testScore('1-', [1]);
    });
    it('scores two complete frames', function(){
      testScore('----', [0,0]);
      testScore('---1', [0,1]);
      testScore('1234', [3,10]);
      testScore('-/-5', [10,15]);
      testScore('-/5-', [15,20]);
      testScore('-/5-', [15,20]);
      testScore('-/ X', [20]);
      testScore(' X-1', [11,12]);
    });
    it('scores combinations of strikes and spares', function(){
      testScore('-/ X', [20]);
      testScore('5/5/5', [15, 30]);
      testScore(' X X X X X', [30, 60, 90]);
    });
    it('scores complete games', function(){
      testScore(' X X X X X X X X XX--',
               [30,60,90,120,150,180,210,240,260,270]);
      testScore(' X X X X X X X X XXXX',
               [30,60,90,120,150,180,210,240,270,300]);
    });
  });

  function testValid(rolls, score, result, message){
    message = message || 'pinsValidUntil("'+rolls+'", ['+score+'])'
    expect(game.pinsValidUntil(rolls, score)).toBe(result, message);
  }
  describe('pinsValidUntil(rolls, scores)', function(){
    var
      ALLPINS = 11,
      NOPINS = 0;
    it('upon creation', function(){
      testValid('', [], ALLPINS);
    });
    it('first roll of frame', function(){
      testValid('--', [0], ALLPINS);
      testValid('----', [0, 0], ALLPINS);
      testValid(' X X', [], ALLPINS);
    });
    it('second roll of frame', function(){
      testValid('-', [], ALLPINS);
      testValid('1', [], 10);
      testValid('9', [],  2);
    });
    describe('tenth frame', function(){
      var prefix = '1-2-3-4-5-6-7-8-9-',
          scores = [1,3,6,10,15,21,28,36,45];
      it('open frame', function(){
        testValid(prefix, scores, ALLPINS);
        testValid(prefix+4, scores, 7);
        testValid(prefix+4+5, scores.concat(54), NOPINS);
      });
      it('leadoff spare', function(){
        testValid(prefix+4+6, scores, ALLPINS);
        testValid(prefix+4+'/'+1, scores.concat(56), NOPINS);
      });
      it('leadoff strike', function(){
        testValid(prefix+'X', scores, ALLPINS);
        testValid(prefix+'X-', scores, ALLPINS);
        testValid(prefix+'X4', scores, 7);
        testValid(prefix+'X4/', scores.concat(65), NOPINS);
        testValid(prefix+'XX', scores, ALLPINS);
        testValid(prefix+'XX-', scores.concat(65), NOPINS);
      });
    });
  });
});
