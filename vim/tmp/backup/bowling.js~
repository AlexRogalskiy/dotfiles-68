'use strict';
ddescribe('Bowling service', function() {
  var bowling;

  beforeEach(function(){
    module('app');
    inject(function(_bowling_){
      bowling = _bowling_;
    });
  });

  describe('score', function() {
    function makeScoreTest(rolls, result){
      (function(rolls, result){
        it('should test [' + rolls +'] => [ + result + ]', function(){
          expect(bowling.score(rolls)).toEqual(result);
        });

      })(rolls, result);
    };

    describe('incomplete frames', function() {
      makeScoreTest([], []);
      makeScoreTest([3], []);
      makeScoreTest([5, 5], []);
      makeScoreTest([10], []);
      makeScoreTest([10, 10], []);
    });

    describe('single complete frames', function() {
      makeScoreTest([2, 3], [5]);
      makeScoreTest([5, 5, 3], [13]);
      makeScoreTest([10,10,10], [30]);
    });

    describe('multiple complete frames', function() {
      makeScoreTest([0,0,1,2], [0, 3]);
      makeScoreTest([5,5,5,4], [15, 24])
    });

    describe('tenth frame edge case', function(){
      makeScoreTest([10,10,10,10,10,10,10,10,10,10,0,0],
                   [30,60,90,120,150,180,210,240,260,270]);
    });

    describe('complete games', function() {
      makeScoreTest([10,10,10,10,10,10,10,10,10,10,10,10],
                  [30,60,90,120,150,180,210,240,270,300]);
      makeScoreTest([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
                  [15,30,45,60,75,90,105,120,135,150]);
    });
  });

  describe('roll', function() {
    function makeRollTest(rolls, result){
      (function(rolls, result){
        it('should test [' + rolls +'] => \'' + result + '\'', function(){
          expect(bowling.roll(rolls)).toBe(result);
        });

      })(rolls, result);
    };

    describe('single rolls', function() {
      makeRollTest([],'');
      makeRollTest([0], '-');
      makeRollTest([1], '1');
      makeRollTest([3], '3');
      makeRollTest([10], ' X');
    });
    describe('multiple rolls', function(){
      makeRollTest([3,0], '3-');
      makeRollTest([3,7], '3/');
      makeRollTest([10, 0], ' X-')
      makeRollTest([10, 10], ' X X')
      makeRollTest([0, 0, 10], '-- X')
    });
    describe('tenth frame edge cases', function() {
      var nineFrames = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0];
      makeRollTest(nineFrames.concat(10,10,10), '1-2-3-4-5-6-7-8-9-XXX');
      makeRollTest(nineFrames.concat(10,0,10), '1-2-3-4-5-6-7-8-9-X-/');
    });
    xdescribe('complete games', function() {
      makeRollTest([10,10,10,10,10,10,10,10,10,10,10,10],
                  ' X X X X X X X X XXXX');
    });
  });

  describe('maxEnabled', function() {
    function makeMaxEnabledTest(rolls, result){
      (function(rolls, result){
        it('should test [' + rolls +'] => ' + result, function(){
          expect(bowling.maxEnabled(rolls)).toBe(result);
        });

      })(rolls, result);
    }

    describe('new game', function() {
      makeMaxEnabledTest([], 10);
    });
    describe('game over', function() {
      makeMaxEnabledTest([10,10,10,10,10,10,10,10,10,10,10,10], -1);
    });
    describe('second roll of a frame', function() {
      makeMaxEnabledTest([0], 10);
      makeMaxEnabledTest([1], 9);
      makeMaxEnabledTest([9], 1);
      makeMaxEnabledTest([10], 10);
    });
    describe('tenth frame', function() {
      var nineFrames = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0];
      makeMaxEnabledTest(nineFrames, 10);
      makeMaxEnabledTest(nineFrames.concat(10), 10);
      makeMaxEnabledTest(nineFrames.concat(10, 10), 10);
      makeMaxEnabledTest(nineFrames.concat(10, 1), 9);
    });

  });
});
;
