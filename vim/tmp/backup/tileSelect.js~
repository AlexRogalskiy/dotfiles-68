'use strict';
ddescribe('tileSelect', function(){
  // intentionally underspecified
  var tileSelect;
  beforeEach(function(){
    module('app');
    inject(function(_tileSelect_){
      tileSelect = _tileSelect_;
    });
  });
  it('should return a valid tile', function(){
    var result = tileSelect({tiles: []});
    expect(result.x >= 0 && result.x < 4).toBeTruthy('valid x');
    expect(result.y >= 0 && result.y < 4).toBeTruthy('valid y');
    expect(result.score === 2 || result.score === 4).toBeTruthy('valid score');
  });

  function testSingleMissingTile(t){
    it('should return a single missing tile', function(){
      var tiles = fullTiles();
      var outTile = tiles.splice(t,1)[0];
      expect(tileSelect({tiles: tiles }).x).toEqual(outTile.x, 'failed on '+t);
      expect(tileSelect({tiles: tiles }).y).toEqual(outTile.y, 'failed on '+t);
    });
  }
  for(var t=0; t<16; t++){ testSingleMissingTile(t); }

  function testIthTile(t){
    it('should return the tth tile, using mock Math.random()', function(){
      var oldRandom = Math.random;
      Math.random = function(){return t * 1.0/16 + 0.0001;};
      expect(tileSelect({ tiles: [] }).x).toBe(fullTiles()[t].x, 'failed on '+t);
      expect(tileSelect({ tiles: [] }).y).toBe(fullTiles()[t].y, 'failed on '+t);
      Math.random = oldRandom;
    });
  }
  for(t=0; t<16; t++){ testIthTile(t); }

  it('should return a 2 score, using mock Math.random()', function(){
    var oldRandom = Math.random;
    Math.random = function(){return 0.01;};
    expect(tileSelect({tiles:[]}).score).toEqual(2);
    Math.random = function(){return 0.51;};
    expect(tileSelect({tiles:[]}).score).toEqual(4);
    Math.random = oldRandom;
  });

  function fullTiles(){
    var tiles = [];
    for (var j=0; j<4; j++){
      for (var i=0; i<4; i++){
        tiles.push({x:i, y:j, score: 2});
      }
    }
    return tiles;
  }
});
