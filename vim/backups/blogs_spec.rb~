require_relative '../boundaries/interactor_interface'
require_relative '../../interactors/blogs'

describe Blogs do

  # before :each do
  #   Repository.configure Page => MemoryRepos::PageRepo.new
  # end 

  describe Blogs::New do

    let(:subject){Blogs::New.new(request)}
    let(:request){Request.new}

    it_should_behave_like "an interactor"

    it "should respond with a new blog" do
      subject.execute.blog.should be_kind_of Blog
    end
  end

  describe Blogs::NewPost do

    let(:blog){double("blog", kind_of?: true, new_post: nil)}
    let (:subject){Blogs::NewPost.new(request)}

    context "interface" do
      let(:request){Request.new}
      it_should_behave_like "an interactor" 
    end

    context "on execution" do
      let(:request){Request.new(blog: blog, title: 'title', body: 'body')}
      let(:post){double("post", {
        kind_of?: true,
        blog: blog, 
        title: request.title, 
        body: request.body
      })}
  
      before :each do
        blog.stub(new_post: post)
      end

      it "should obtain the post from blog" do
        blog.should_receive(:new_post).and_return post
        subject.execute.blog.should == blog
      end

      it "should create a new post with the specified attributes" do
        p = subject.execute.post
        p.title == request.title
        p.body == request.body
      end

      it "should bind the post to this blog" do 
        subject.execute.blog.should == blog
      end

    end

    context "use case alternative 1" do
      let(:request){Request.new(blog: blog, title:nil)}
      let(:post){ Post.new blog: blog, title: "", body: "" }
      
      it "should create a new post with the specified attributes being empty" do
        blog.should_receive(:new_post).with(blog: blog, title: "", body: "").and_return post 
        p = subject.execute
        p.post.title.should be_empty
        p.post.body.should be_empty
      end

    end

    context "use case alternative 2" do

      it "should complain unless a blog is specified" do
        expect{Blogs::NewPost.new(title: 'foo', body: 'bar').execute}.to raise_error ArgumentError        
      end

      it "should complain unless the specified blog is a Blog" do
        expect{Blogs::NewPost.new(blog: 13).execute}.to raise_error ArgumentError
      end
    end
  
  end

end
