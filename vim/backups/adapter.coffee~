root = (exports ? this)

nextTick = (process?.nextTick) or
           (typeof setImmediate == 'function' && setImmediate) or
           (task) -> setTimeout(task, 0)

class Promise
  constructor: ->
    @status = 'pending'
    @pendingCallbacks = []

  fulfill: (value) ->
    if @status == 'pending'
      [@status, @value] = ['fulfilled', value]
      for pending in @pendingCallbacks
        do(pending) => nextTick => @_apply pending.onFulfill, value
      @pendingCallbacks = []
    @

  reject: (reason) ->
    if @status == 'pending'
      [@status, @reason] = ['rejected', reason]
      for pending in @pendingCallbacks
        do(pending) => nextTick => @_apply pending.onReject, reason
      @pendingCallbacks = []
    @

  then: (onFulfill, onReject) ->
    switch @status
      when 'pending' then @pendingCallbacks.push {onFulfill: onFulfill, onReject: onReject}
      when 'fulfilled' then nextTick => @_apply onFulfill, @value
      when 'rejected' then nextTick => @_apply onReject, @reason
    @

  _isPending: -> @status == 'pending'

  _apply: (f, fate) ->
    try
      switch typeof f
        when 'function' then f(fate)
    catch e
      @reject e
root.fullfilled = (value) -> (new Promise).fulfill(value)
root.rejected = (reason) -> (new Promise).reject(reason)
root.pending = ->
  promise: new Promise
  fulfill: (value) -> @promise.fulfill(value)
  reject: (reason) -> @promise.reject(reason)
