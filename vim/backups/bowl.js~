'use strict';
describe('VM BowlVM', function(){
  var vm;

  var mocks = {};
  function showMock(rolls){
    if (!rolls) return '<undefined>';
    return '['+rolls.toString()+']';
  }
  function scorer(rolls){
    mocks[rolls] = mocks[rolls] || {
      lineDisplay: {mock: 'rolls['+showMock(rolls)+'].lineDisplay()'},
      frameScores: {mock: 'rolls['+showMock(rolls)+'].frameScores()'},
      isInvalid: {mock: 'rolls['+showMock(rolls)+'].frameScores'}
    };
    return  {
      lineDisplay: function(){ return mocks[rolls].lineDisplay; },
      frameScores: function(){ return mocks[rolls].frameScores; },
      isInvalid: mocks[rolls].isInvalid
    };
  }

  function vmShouldBeUpdateFromScorer(rolls) {
    var theScorer = scorer(rolls);
    expect(vm.lineDisplay).toBe(theScorer.lineDisplay());
    expect(vm.frameScores).toBe(theScorer.frameScores());
    expect(vm.isInvalid).toBe(theScorer.isInvalid);
  }

  beforeEach(function(){
    module('app');
    inject(function($controller){
      vm = $controller('BowlVM', {scorer: scorer});
    });
  });

  it('should update vm upon creation', function(){
    vmShouldBeUpdateFromScorer([]);
  });

  it('should update vm after gutter ball', function(){
    vm.addRoll(0);
    vmShouldBeUpdateFromScorer([0]);
  });

  it('should update vm after strike', function(){
    vm.addRoll(10);
    vmShouldBeUpdateFromScorer([10]);
  });

  it('should update vm after gutter spare', function(){
    vm.addRoll(0);
    vm.addRoll(10);
    vmShouldBeUpdateFromScorer([0,10]);
  });

  it('should update vm after reset', function(){
    vm.lineDisplay = null;
    vm.reset();
    vmShouldBeUpdateFromScorer([]);
  });
});
