require File.expand_path('../../../app/services/e_c_b_valid.rb', __FILE__)
require 'active_attr'
require 'active_model'

class PasswordResetTokenValidator < ActiveModel::EachValidator
  def validate_each(r, attr, val)
    if r.token_service.for_token(val).norecord? || r.token_service.expired?
      r.errors[:base] << "The reset information is invalid or expired."
    end
  end
end

class PasswordReset

  include ActiveAttr::Model  

  attribute :token
  validates :token, :presence => true, :unless => Proc.new{|r| r.email.present?}
  validates :token, :format => ECBValid.urlsafe_base64, :unless => Proc.new{|r| r.email.present?}
  validates :token, :password_reset_token => true, :unless => Proc.new{|r| r.email.present?}

  attribute :email
  validates :email, :presence => true, :unless => Proc.new{|r| r.token.present?}
  validates :email, :format => ECBValid.email, :unless => Proc.new{|r| r.token.present?}

  attribute :password
  attribute :password_confirmation
  validates :password, :presence => true, :unless => Proc.new{|r| r.email.present?}
  validates :password, 
    :format => {:with => ECBValid.password, :message => "must be at least 6 letters or numbers"},
    :unless => Proc.new{|r| r.email.present?}
  validates :password, :confirmation => true, :unless => Proc.new{|r| r.email.present?}
  validates :password_confirmation, :presence => true, :unless => Proc.new{|r| r.email.present?}

  def token_service
    @token_service ||= TokenService.new(:password_reset_token)
  end

  def request attributes={}
    if update_attributes(attributes) && token_service.for_email(email).record?
      token_service.generate
      EcasebaseMailer.password_reset_notice(token_service.record).deliver
    end
    valid?
  end

  def reset attributes={}
    if update_attributes(attributes) && token_service.record?
      user = token_service.record
      user.update_attributes(password: password, password_confirmation: password_confirmation)
      EcasebaseMailer.password_reset_confirm(user).deliver
    end
    valid?
  end

private

  def update_attributes hash={}
    assign_attributes(hash)
    valid?
  end

end
