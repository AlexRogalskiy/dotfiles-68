require 'active_support/all'
require File.expand_path('../../../app/services/token_service.rb', __FILE__)
require File.expand_path('../../../app/services/e_c_b_valid.rb', __FILE__)
require File.expand_path('../../../app/services/password_reset.rb', __FILE__)

class EcasebaseMailer; end

describe PasswordReset do

  context "operates on User#password_reset_token" do

    subject{PasswordReset.new}
    let(:token_service){double('token_service').as_null_object}

    it "should use :password_reset_token" do
      EcasebaseMailer.stub(:password_reset_notice => stub(:deliver => nil))
      token_service.stub(:record => TokenService::NoRecord)
      TokenService.should_receive(:new).with(:password_reset_token).and_return token_service 
      subject.request email:'abc@def.com'
    end

  end

  context "request" do
  
    let(:email){'abc@def.com'}
    let(:token_service){double('token_service')}
    let(:record){double('user record')}

    # happy path
    context "with valid email for existing user record," do

      before :each do
        token_service.stub(:for_email => token_service, :record? => true, :record => record, :generate => nil)
        EcasebaseMailer.stub(:password_reset_notice => stub(:deliver => nil))
        TokenService.stub(:new => token_service)  
      end

      it "should create a new password_reset_token" do
        token_service.should_receive(:generate)
        subject.request email: email
      end

      it "should send mail with the reset information" do
        EcasebaseMailer.should_receive(:password_reset_notice).with(record).and_return(mail = double('mail'))
        mail.should_receive(:deliver)
          
        subject.request email: email
      end

      it "should answer true" do
        subject.request(email: email).should == true 
        subject.errors.should be_empty
      end

    end

    # edge cases
    it "with empty token, should be invalid with nil email" do
      subject.request(email: nil).should == false 
      subject.errors[:email].should be_present
    end

    it "with empty token, should be invalid with invalid email" do
      subject.request(email: 'a@@b').should == false
      subject.errors[:email].should be_present
    end

    it "with valid email not in database, DO NOTHING,  yet BE VALID, for security" do
      token_service.stub(:for_email => token_service, :record? => false, :record => TokenService::NoRecord)
      TokenService.stub(:new => token_service)  
      token_service.should_not_receive :generate 
      EcasebaseMailer.should_not_receive :password_reset_notice
      
      subject.request(email: email).should == true 
      subject.errors[:email].should be_empty 
    end

  end

  context "reset" do
    subject{PasswordReset.new}
    let(:password){'secret'}
    let(:token) { '1234567890ABCDEabcde-_' }
    let(:token_service) { double('token_service') }
    let(:record) { double 'user_record' }
    before :each do
      record.stub(:update_attributes => true)
      token_service.stub(:for_token => token_service, :record? => true, :norecord? => false, :record => record, :expired? => false)
      TokenService.stub(:new => token_service)
      EcasebaseMailer.stub(:password_reset_confirm => stub(:deliver => stub)) 
    end
    # happy path
    context "with valid inputs," do
      it "should reset the password" do
        token_service.should_receive(:record).and_return(record)
        record.should_receive(:update_attributes).with(password: password, password_confirmation: password).and_return true

        subject.token = token
        subject.reset password: password, password_confirmation: password 
      end

      it "should mail a confirmation" do
        EcasebaseMailer.should_receive(:password_reset_confirm).with(record).and_return(mail = double('mail'))
        mail.should_receive(:deliver)
        
        subject.token = token
        subject.reset password: password, password_confirmation: password 
      end

      it "should answer true" do
        subject.token = token
        subject.reset(password: password, password_confirmation: password).should == true
      end
    
    end
    
    # edge cases
    it "with empty email, should be invaid with nil token" do
      subject.reset(token: nil).should == false
      subject.errors[:token].should be_present
    end

    it "wtih empty email, should be invalid with token and nil password" do
      subject.reset(token: token, password: nil, password_confirmation: 'secret').should == false
      subject.errors[:password].should be_present
    end

    it "wtih empty email, should be invalid with token and invalid password" do
      subject.reset(token: token, password: 'ab', password_confirmation: 'ab').should == false
      subject.errors[:password].should be_present
    end

    it "with empty email, should be invalid with token, valid password, nil confirmation" do
      subject.reset(token: token, password: 'secret').should == false
      subject.errors[:password_confirmation].should be_present
    end

    it "with empty email, should be invalid with token, valid password, mismatched confirmation" do
      subject.reset(token: token, password: 'secret', password_confirmation: 'patent').should == false
      subject.errors[:password].should be_present
    end

    it "with empty email, should be invalid with invalid token" do
      token_service = double('token_service')
      token_service.stub(:for_token => token_service, :norecord? => true, :record? => false, :expired? => false)
      TokenService.stub(:new => token_service)

      subject.token = '1234567890ABCDEabcde-_' 
      subject.reset(password: password, password_confirmation: password).should == false 
      subject.errors[:base].should be_present
    end
 
    it "with empty email, should be invalid with valid, but expired token" do
      token_service = double('token_service')
      token_service.stub(:for_token => token_service, :norecord? => false, :record? => :true, :expired? => true)
      TokenService.stub(:new => token_service)

      subject.token = '1234567890ABCDEabcde-_' 
      subject.reset(password: password, password_confirmation: password).should == false 
      subject.errors[:base].should be_present
    end
  
  end

end
