(function(e){
  if("function"==typeof bootstrap)
    bootstrap("covenant",e);
  else if("object"==typeof exports)module.exports=e();
  else if("function"==typeof define&&define.amd)define(e);
  else if("undefined"!=typeof ses){
    if(!ses.ok())return;ses.makeCovenant=e
  } else
    "undefined"!=typeof window?window.Covenant=e():global.Covenant=e()
})(function(){
  var define,ses,bootstrap,module,exports;
  return (function(e,t,n){
    function i(n,s){
      if(!t[n]){
        if(!e[n]){
          var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")
        }
        var u=t[n]={exports:{}};
        e[n][0].call(u.exports,function(t){
          var r=e[n][1][t];
          return i(r?r:t)
        },u,u.exports)
      }
      return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i
  })({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(require,module,exports){
(function(process){(function() {
  var CompletedState, Core, Covenant, FulfilledState, PendingState, RejectedState, enqueue, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.enqueue = enqueue = (typeof setImmediate === 'function' && setImmediate) || (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) || function(task) {
    return setTimeout(task, 0);
  };

  root.Covenant = Covenant = (function() {
    function Covenant(then) {
      this.then = then != null ? then : function() {};
    }

    return Covenant;

  })();

  root.Core = Core = (function(_super) {
    __extends(Core, _super);

    function Core(resolver) {
      if (resolver == null) {
        resolver = function() {};
      }
      this._resolveNonCovenantValue = __bind(this._resolveNonCovenantValue, this);
      this.resolve = __bind(this.resolve, this);
      this.reject = __bind(this.reject, this);
      this.fulfill = __bind(this.fulfill, this);
      this.then = __bind(this.then, this);
      if (!(this instanceof Core)) {
        return new Core(resolver);
      }
      if (typeof resolver !== 'function') {
        throw new TypeError("resolver must be a function");
      }
      this._buildPromise(resolver);
    }

    Core.prototype._buildPromise = function(resolver) {
      var e, _ref;

      this.state = new PendingState;
      this.promise = (_ref = this.promise) != null ? _ref : new Covenant(this.then);
      try {
        return resolver.call(this, this.resolve, this.reject, this);
      } catch (_error) {
        e = _error;
        return this.reject(e);
      }
    };

    Core.prototype.then = function(onFulfill, onReject) {
      var _this = this;

      return new this.constructor(function(resolve, reject) {
        return _this.state.schedule(function(state) {
          return state.then(onFulfill, onReject).then(resolve, reject);
        });
      });
    };

    Core.prototype.fulfill = function(value) {
      return this.state = this.state.fulfill(value);
    };

    Core.prototype.reject = function(reason) {
      return this.state = this.state.reject(reason);
    };

    Core.prototype.resolve = function(value) {
      if (value instanceof Covenant) {
        return value.then(this.fulfill, this.reject);
      } else {
        return this._resolveNonCovenantValue(value);
      }
    };

    Core.prototype._resolveNonCovenantValue = function(value) {
      var e, once, valueThen;

      try {
        valueThen = value != null ? value.then : void 0;
        if (value !== Object(value) || typeof valueThen !== 'function') {
          return this.fulfill(value);
        } else {
          once = (function(done) {
            return function(f) {
              return function(x) {
                if (!done) {
                  done = true;
                  return f(x);
                }
              };
            };
          })(false);
          try {
            return valueThen.call(value, once(this.resolve), once(this.reject));
          } catch (_error) {
            e = _error;
            return once(this.reject)(e);
          }
        }
      } catch (_error) {
        e = _error;
        return this.reject(e);
      }
    };

    return Core;

  })(Covenant);

  PendingState = (function() {
    function PendingState() {
      this.schedule = __bind(this.schedule, this);      this.pendeds = [];
    }

    PendingState.prototype.fulfill = function(value) {
      return new FulfilledState(value, this.pendeds);
    };

    PendingState.prototype.reject = function(reason) {
      return new RejectedState(reason, this.pendeds);
    };

    PendingState.prototype.schedule = function(f) {
      return this.pendeds.push(f);
    };

    return PendingState;

  })();

  CompletedState = (function() {
    function CompletedState(pendeds) {
      var _this = this;

      if (pendeds == null) {
        pendeds = [];
      }
      this.schedule = __bind(this.schedule, this);
      enqueue(function() {
        var pended, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = pendeds.length; _i < _len; _i++) {
          pended = pendeds[_i];
          _results.push(pended(_this));
        }
        return _results;
      });
    }

    CompletedState.prototype.fulfill = function() {
      return this;
    };

    CompletedState.prototype.reject = function() {
      return this;
    };

    CompletedState.prototype.then = function(onFulfilledOrRejected, valueOrReason) {
      var e;

      try {
        if (typeof onFulfilledOrRejected !== 'function') {
          return this;
        } else {
          return new FulfilledState(onFulfilledOrRejected(valueOrReason));
        }
      } catch (_error) {
        e = _error;
        return new RejectedState(e);
      }
    };

    CompletedState.prototype.schedule = function(f) {
      var _this = this;

      return enqueue(function() {
        return f(_this);
      });
    };

    return CompletedState;

  })();

  FulfilledState = (function(_super) {
    __extends(FulfilledState, _super);

    function FulfilledState(value, pended) {
      this.value = value;
      FulfilledState.__super__.constructor.call(this, pended);
    }

    FulfilledState.prototype.then = function(onFulfill, onReject) {
      return FulfilledState.__super__.then.call(this, onFulfill, this.value);
    };

    return FulfilledState;

  })(CompletedState);

  RejectedState = (function(_super) {
    __extends(RejectedState, _super);

    function RejectedState(reason, pended) {
      this.reason = reason;
      RejectedState.__super__.constructor.call(this, pended);
    }

    RejectedState.prototype.then = function(onFulfill, onReject) {
      return RejectedState.__super__.then.call(this, onReject, this.reason);
    };

    return RejectedState;

  })(CompletedState);

}).call(this);


})(require("__browserify_process"))
},{"__browserify_process":1}]},{},[2])(2)
});
;
