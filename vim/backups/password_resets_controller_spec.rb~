require 'spec_helper'
require 'mock_user_helper'


describe PasswordResetsController do

  context 'new: reqeust form for a new password reset' do

    def donew; get :new; end

    it "should create a Password Request Object for the form" do
      PasswordReset.should_receive(:new).and_return(pr=stub)
      donew
      assigns[:password_reset].should == pr 
    end

    it "should render the request form" do
      donew
      response.should render_template 'new'
    end

  end

  context 'create: deliver new password reset information' do
    
    def docreate; post :create, :password_reset => {email: email}; end

    context 'with valid email present in the databse' do
      
      let(:email) { 'abc@def.com' }
      let(:mailer){stub(:deliver => true)}
      let!(:user) do
        mock_user_by_email(email) do |user|
          user.stub(
            :password_reset_token= => stub,
            :save => user,
            :update_attributes => true,
            :email => email,
            :user? => true
          )
        end
      end

      before :each do  
        EcasebaseMailer.stub(:password_reset_notice => stub(:deliver => true))
      end
  
      it "should create a new password_reset_token" do
        user.should_receive(:password_reset_token=).with(anything)
        user.should_receive(:save)
        docreate
      end

      it "should send an email to the user with the reset link" do
        EcasebaseMailer.should_receive(:password_reset_notice).with(user).and_return(mailer)
        mailer.should_receive(:deliver)
        docreate
      end

      it "should redirect to the signin page" do
        docreate
        response.should redirect_to signin_url
      end

      it "should give the user notice the link was sent" do
        docreate
        flash[:notice].should == I18n.t('password_resets.create.notice')
      end

    end

    context 'with valid email, but no account' do
      let(:email){'abc@def.com'}
      let(:user) do
        mock_user_by_email(email) do |user|
          user.stub(
            :email => email, 
            :user? => false, 
            :kind_of? => true, 
            :password_reset_token => stub,
            :update_attributes => true
          )
        end
      end

      it "should redirect to the signin page" do
        docreate
        response.should redirect_to signin_url
      end

      it "should give the user (false) notice the link was sent" do
        docreate
        flash[:notice].should == I18n.t('password_resets.create.notice')
      end

    end

    context 'with invalid email' do
    
      let(:request_object) { PasswordReset.new }
    
      before :each do
        User.should_not_receive :find_by_email
        PasswordReset.stub(:new => request_object)
      end

      it "should render the new page" do
        post :create, :password_reset => {"email" => 'x@@foobar'}
        response.should render_template 'new'
      end

      it "should notify the user there are errors" do
        post :create, :password_reset => {"email" => 'x@@foobar'}
        flash[:alert].should == I18n.t('password_resets.create.alert')
      end

      it "should assign the request object" do
        post :create, :password_reset => {"email" => 'x@@foobar'}
        assigns[:password_reset].should == request_object
      end

    end

  end

  context 'edit: request a new password reset' do

    let(:pr){stub}
    let(:token){stub 'token', :to_s => 'token'}

    def doedit
      get :edit, :id => token
    end

    before :each do
      PasswordReset.should_receive(:new).with(:token => token.to_s).and_return(pr)
    end    

    it "should assign the corresponding password_reset to @password_reset" do
      doedit
      assigns[:password_reset].should == pr
    end

    it "should render the password reset form" do
      doedit
      response.should render_template 'edit'
    end

  end

  context 'update' do

    let(:token) { '123456790ABCDEabcde-_' }
    let(:password_reset) { double('password_reset')}
    before :each do
        password_reset.stub(:reset => nil)
        PasswordReset.stub(:new => password_reset)
    end

    def doupdate
      put :update, :id => stub, :password_reset=> stub
    end

    context 'should integrate with the password reset service' do

      it "should create and assign a password resetter for the token" do
        PasswordReset.should_receive(:new).with(token: token).and_return(password_reset)
        put :update, :id => token, :password_reset => stub 
        assigns[:password_reset].should == password_reset
      end

      it "should instruct the password resetter to #reset in accordance with parameter hash" do
        parameter_hash = {"param" =>  "param"}
        password_reset.should_receive(:reset).with(parameter_hash)
        put :update, :id => stub, :password_reset => parameter_hash 
      end

    end

    context 'a successful reset' do

      before :each do
        password_reset.stub(:reset => true)
      end

      it "should redirect to signin page" do
        doupdate
        response.should redirect_to signin_url
      end

      it "should give the user notice the password was reset" do
        doupdate
        flash[:notice].should == I18n.t('password_resets.update.notice')
      end
    
    end

    context 'an unsuccessful reset' do

      before :each do
        password_reset.stub(:reset => false)
      end

      it "should re-render the edit menu" do
        doupdate
        response.should render_template 'edit' 
      end

      it "should notify the user that password has not been updated" do
        doupdate
        flash[:alert].should == I18n.t('password_resets.update.alert')
      end

    end

  end

end

