'use strict';
describe('ViewModel AppVM', function(){
  var vm;
  beforeEach(function(){
    module('app');
    inject(function($controller){
      vm = $controller('AppVM');
    });
  });
  function test(arr, result){
    it('sort(['+arr.toString()+']) should be ['+result.toString()+']', function(){
      expect(vm.sort(arr)).toEqual(result);
    });
  }

  it('should expose an initially empty list', function(){
    expect(vm.list).toEqual('');
  });

  describe('toList', function(){
    it('should coerce empty string to empty list', function(){
      expect(vm.toList('')).toEqual([]);
    });
    it('should coerce string of single integer to singleton list of integer', function(){
      expect(vm.toList('1')).toEqual([1]);
      expect(vm.toList('2')).toEqual([2]);
    });
    it('should coerce comma-separated lists to corresponding array', function(){
      expect(vm.toList('1,2')).toEqual([1,2]);
      expect(vm.toList('2,1')).toEqual([2,1]);
    });
  });
  describe('sorting', function(){
    test([], []);
    test([1], [1]);
    test([2], [2]);
    test([1,2], [1,2]);
    test([2,1], [1,2]);
    test([3,1], [1,3]);
    test([2,1,3], [1,2,3]);
    test([3,1,4], [1,3,4]);
    test([2,0,3], [0,2,3]);
    test([2,3,1], [1,2,3]);
    test([1,2,3], [1,2,3]);
    test([1,3,2], [1,2,3]);
    test([3,2,1], [1,2,3]);
    test([3,2,2,1], [1,2,2,3]);
  });
  function timeToSort(x){
    var a = [];
    for (var i=0; i<x; i++) {a.push(i);}
    var begin = Date.now();
    vm.sort(a);
    return Date.now() - begin;
  }
  describe('performance', function(){
    it('should be kewl', function(){
      var bigOh = timeToSort(1000);
      expect(timeToSort(2000)).toBeLessThan(4*bigOh, 1000);
      expect(timeToSort(4000)).toBeLessThan(8*bigOh, 4000);
    });
  });
});
