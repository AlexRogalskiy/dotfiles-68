Superheroic 2048: an AngularJS Kata
===================================

In this multi-part kata, we will build out and implement a full-featured
implementation of Garbiele Cirulli's 2048 using AngularJS. Using
Test-First disciplines, we will build applications built from scratch,
starting with an empty file. From the simplest examples to full-scale
AngularJS and backend systems, I hope these katas may inspire you to
adopt these terrific agile practices to change the world with your own
examples and craftsmanship.

I will perform each kata for you in a screencast and in written materials
summarizing the development. Then it is your turn.
Correct performance has nothing to do with mimicking what I show you,
but by finding your own chops and improving on the craft.\
We repeat katas to better comprehend the practices and to build mental
muscle memory so that skills flow quickly from your mind, as though you
were touch typing the ideas themselves. They should take your breath
away, as can a Mozart aria.

My name is Andrew Greenberg, and I would be grateful for your comments
and suggestions as you work through these forms. You can find me by
e-mail at wizardwerdna@gmail.com, or at @wizardwerdna on twitter. Now,
let's get this kata started.

The Plan
--------

This kata will incorporate many of the Bunkai we have learned
earlier, to build a complex computer game.  It will feature many
of the testing techniques we have used to date, and introduce a few
new ones: The Page Object Pattern, Testing With Randomness and a special
purpose "roll-your own" spy test double.

There won't be any big design up front, but we have a modest plan.
Our [first iteration]() will focus on building out the game display
mechanics and integrating them with the javascript.  We will construct
a truly deployable walking skeleton, and move to the second stage.

The [next iteration]() will focus on game logic which will probably be
built in a separate service.  We will conclude the iteration by 
assuring our integration tests are working, and take a look at our
work through a browser.

The [third iteration]() will be the cleanup and polish, wiring the last
inches of the user interface and game mechanics.

Designer's Specification
------------------------

While we are building the game logic, a designer will be working on
SASS/CSS code to display the game to the user. (We don't really have a
designer, but will be using the CSS and HTML from the original program.
We are grateful to Mr. Cirulli for licensing this code under the MIT
license for our use.)

Since one depends on the other, we will do some specification of that
work up front the code integrates well. He will incorporate our code in
his HTML when we finish the first iteration. We are given specifications
of classes and related details, which are summarized in the following:

| Description | CSS Selectors |
| --- | --- |
| Game HTML Container  | .container               |
| Restart Game Button  | .restart-button          |
| Current Game Score   | .score-container         |
| Best Game Score      | .best-container          |
| Game tile            | .tile                    |
|   -  tile position   | .tile.tile-position-1-3  | 
|   -  tile number     | .tile.score-2048         |
|                      | .tile>.tile-inner{2048}  |
| Game Won             | .game-message.game-won   |
| Game Over            | .game-message.game-over  |
| Message for Game     | .game-message>p{Message} |

Table: Designer Specification

**Notes:**

  - Game tile positions are 1-based
  - Both forms of tile score information must be present
  - Only one of .game-won / .game-over should be present, .game-won takes precedence in any case.
  - The message should be one of "", "Game over!" or "Game won!" 

Let's get this kata started, with the first iteration.

